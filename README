#블록체인 기반 문서 위조 방지 시스템
이 프로젝트는 블록체인 기술을 활용하여 문서의 진위 여부를 검증하고 위조를 방지하는 시스템입니다. 문서를 업로드하면 고유한 해시값을 생성하여 블록체인에 기록하고, 필요할 때 언제든 해당 문서의 진위 여부를 확인할 수 있도록 합니다.

##1. 프로그램 소개
어떤 프로그램인가요?

사용자가 문서를 업로드하면 해당 문서의 디지털 지문이라 할 수 있는 고유한 **해시값(Hash Value)**을 생성합니다.

생성된 해시값을 **블록체인(Blockchain)**에 기록하여 문서의 존재와 무결성을 영구적으로 증명합니다. 블록체인의 불변성(Immutability) 덕분에 한번 기록된 해시값은 절대 위변조할 수 없습니다.

이후 누구나 원본 문서를 다시 업로드하여 블록체인에 기록된 해시값과 비교함으로써, 문서가 위조되거나 변조되었는지 쉽게 검증할 수 있습니다.

이는 학위증, 계약서, 인증서 등 위변조 방지가 중요한 모든 형태의 전자 문서에 적용 가능합니다.

##2. 필요 언어 및 프로그램 (환경)
이 프로젝트를 실행하고 개발하기 위해 다음 언어 및 프로그램이 필요합니다.

###언어:

Python 3.x: 백엔드 서버 개발

Solidity: 스마트 계약 개발

JavaScript: 웹 프론트엔드 개발

핵심 프로그램/도구:

Node.js (LTS 버전 권장): npm 또는 yarn을 포함하며, Truffle과 같은 JavaScript 기반 개발 도구를 실행하는 데 필요합니다.

Ganache: 로컬에서 개발용 블록체인 네트워크를 빠르게 구동할 수 있는 개인 이더리움 블록체인입니다.

Git: 소스 코드 버전 관리를 위해 필요합니다.

##3. 프로젝트 실행 매뉴얼 (처음 ZIP 파일로 받았을 때 기준)
다음 단계를 순서대로 따라 하시면 프로젝트를 로컬 환경에서 정상적으로 실행할 수 있습니다.

###3.1. 프로젝트 파일 준비

제공받은 ZIP 파일을 원하는 위치에 압축 해제합니다.

압축 해제 후 생성된 BlockChain_Document 폴더로 이동합니다.

###3.2. 파이썬 가상 환경 설정 및 라이브러리 설치

**터미널 (Windows PowerShell 또는 Git Bash)**을 엽니다.

BlockChain_Document 폴더로 이동한 후, 다음 명령어를 입력하여 파이썬 가상 환경을 활성화합니다.

Windows PowerShell:
.\venv\Scripts\activate

macOS / Linux:
source venv/bin/activate

터미널 프롬프트 앞에 (.venv)가 표시되면 성공입니다.

가상 환경이 활성화된 상태에서, 필요한 파이썬 라이브러리를 설치합니다.
python -m pip install fastapi uvicorn python-multipart web3 python-dotenv

##Ganache 실행 및 설정 확인

Ganache 앱을 실행합니다.

**Quickstart**를 선택하거나, 이전에 설정했던 워크스페이스를 로드합니다.

Ganache 화면 상단에서 RPC SERVER 주소와 NETWORK ID를 확인합니다. (기본값: HTTP://127.0.0.1:8545, 5777)

주의: 만약 이 값이 다르다면, truffle-config.js 파일과 .env 파일의 해당 값을 일치시켜야 합니다. (이 매뉴얼은 8545와 5777을 기준으로 작성되었습니다.)

##3.4. Truffle을 이용한 스마트 계약 배포

**동일한 터미널 (가상 환경이 활성화된 상태)**에서 다음 명령어를 입력하여 스마트 계약을 Ganache에 배포합니다.

truffle migrate --network development

배포가 성공하면 터미널 로그에 contract address:가 표시됩니다. 이 주소를 복사합니다

. 환경 변수 (.env) 파일 업데이트

프로젝트의 루트 폴더(BlockChain_Document)에 있는 .env 파일을 텍스트 에디터로 엽니다.

CONTRACT_ADDRESS 값을 3.4단계에서 복사한 새로운 주소로 교체합니다.

**PRIVATE_KEY**도 Ganache 앱의 ACCOUNTS 탭에서 첫 번째 계정(Index 0)의 **개인 키(Key icon 클릭)**를 복사하여 .env 파일에 붙여넣습니다.

###.env 파일 예시:
WEB3_PROVIDER_URL="http://127.0.0.1:포트번호"
CONTRACT_ADDRESS="0x..." # 복사한 새로운 컨트랙트 주소
PRIVATE_KEY="0x..."     # 복사한 Ganache 계정의 개인 키 (0x 포함)

파일을 저장합니다

##3.6. 백엔드 서버 실행

**동일한 터미널 (가상 환경이 활성화된 상태)**에서 다음 명령어를 입력하여 파이썬 백엔드 서버를 구동합니다.

uvicorn main:app --reload
터미널에 INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) 메시지가 표시되면 서버가 성공적으로 실행된 것입니다.

##3.7. 프론트엔드 웹 서버 실행

새로운 터미널을 하나 더 엽니다. (기존 백엔드 서버 터미널은 그대로 둡니다.)

새 터미널에서 프로젝트 폴더(BlockChain_Document)로 이동한 후, 다음 명령어를 입력하여 HTML 파일을 서빙하는 로컬 웹 서버를 실행합니다.

python -m http.server 8001
터미널에 Serving HTTP on :: port 8001 (http://[::]:8001/) ... 메시지가 표시되는지 확인합니다.

##3.8. 웹 애플리케이션 접속 및 테스트

웹 브라우저를 열고 다음 주소로 접속합니다.

http://localhost:8001
문서 진위 확인 시스템 웹 페이지가 로드됩니다.

[문서 등록하기] 탭에서 테스트:

파일 선택 버튼을 클릭하여 아무 문서 파일(예: test1.txt)을 선택합니다.

블록체인에 등록하기 버튼을 클릭합니다.

UI에 문서 해시가 블록체인에 성공적으로 등록되었습니다. 메시지와 함께 트랜잭션 ID 및 문서 해시가 표시되는지 확인합니다.

Ganache 앱의 TRANSACTIONS 탭에 새로운 트랜잭션이 기록되는 것을 확인합니다.

[문서 검증하기] 탭에서 테스트:

문서 검증하기 탭을 클릭합니다.

진본 문서 검증: 3단계에서 등록했던 동일한 원본 문서 파일을 다시 업로드하고 문서 진위 검증하기 버튼을 클릭합니다.

UI에 진본 문서입니다. 메시지가 표시되는지 확인합니다.

위조 문서 검증: 원본 문서의 내용을 아주 조금만 수정한 후, 문서 진위 검증하기 탭에서 다시 업로드합니다.

UI에 위조된 문서입니다. 메시지가 표시되는지 확인합니다.

이제 모든 구성 요소가 정상적으로 연동되어 작동하는 것을 확인하실 수 있을 것입니다.

##추가 팁:

브라우저 캐시 문제: 테스트 중 웹 페이지에 변화가 없다고 느껴진다면, Ctrl + Shift + R (Windows/Linux) 또는 Cmd + Shift + R (macOS)로 브라우저를 강력 새로고침 해보세요.

문제 발생 시: uvicorn 서버가 실행되는 터미널과 python -m http.server가 실행되는 터미널의 로그를 주의 깊게 확인하면 문제의 단서를 찾을 수 있습니다. 브라우저의 개발자 도구(F12) Console 탭도 중요한 디버깅 정보들을 제공합니다.
